score <- read.csv('Score.csv', fileEncoding = 'UTF-8-BOM')
scoreweight <- read.csv('ScoreWeight.csv', fileEncoding = 'UTF-8-BOM')
scoreweight
score
scoreweight <- scoreweight[scoreweight$Course.Code %in% score$Course.Code]
scoreweight <- scoreweight[scoreweight$Course.Code %in% score$Course.Code,]
scoreweight
samecols <- intersect(colnames(score), colnames(scoreweight))
samecols
score
scoreweight
samecols
grade.intervals <- c(  0, 66,  71, 76,  81,  86, 90,100)
grade.labels    <- c("D","C","B-","B","B+","A-","A")
grade.intervals
grade.labels
grade.intervals <- c(0,66,71,76,81,86,90,100)
grade.intervals
selectdata <- c("Assignment", "Mid.Exam", "Final.Exam")
scoremtx <- data.matrix(score[, selectdata])
scorewiehgtmtx <- data.matrix(scoreweight[, selectdata])
scoremtx
scorewiehgtmtx
rm(scorewieghtmtx)
rm(scorewiehgtmtx)
scoreweightmtx <- data.matrix(scoreweight[, selectdata])
resultmtx <- scoremtx * scoreweightmtx
scoremtx
scoreweightmtx
score <- score[order(score$Course.Code)]
score <- score[order(score$Course.Code),]
score
scoremtx <- data.matrix(score[, selectdata])
scoremtx
scoreweight <- scoreweight[order(scoreweight$Course.Code)]
scoreweight <- scoreweight[order(scoreweight$Course.Code),]
scoreweight
selectdata <- c("Assignment", "Mid.Exam", "Final.Exam")
scoremtx <- data.matrix(score[, selectdata])
scoreweightmtx <- data.matrix(scoreweight[, selectdata])
scoremtx
scoreweightmtx
resultmtx <- scoremtx * scoreweightmtx
View(scoreweightmtx)
View(scoremtx)
View(score)
View(scoreweight)
View(scoreweightmtx)
rm(samecols)
resultmtx <- scoremtx * scoreweightmtx
score <- read.csv('Score.csv', fileEncoding = 'UTF-8-BOM')
scoreweight <- read.csv('ScoreWeight.csv', fileEncoding = 'UTF-8-BOM')
scoreweight <- scoreweight[scoreweight$Course.Code %in% score$Course.Code,]
View(scoreweight)
score <- score[order(score$Course.Code),]
scoreweight <- scoreweight[order(scoreweight$Course.Code),]
score[, selectdata]
scoreweight[, selectdata]
score <- score[score$Course.Code %in% scoreweight$Course.Code]
score <- score[score$Course.Code %in% scoreweight$Course.Code,]
score[, selectdata]
scoreweight[, selectdata]
matrix(scoreweight[, selectdata])
matrix(score[, selectdata])
selectdata <- c("Assignment", "Mid.Exam", "Final.Exam")
scoremtx <- matrix(score[, selectdata])
scoreweightmtx <- matrix(scoreweight[, selectdata])
resultmtx <- scoremtx * scoreweightmtx
scoremtx <- data.matrix(score[, selectdata])
scoreweightmtx <- data.matrix(scoreweight[, selectdata])
resultmtx <- scoremtx * scoreweightmtx
resultmtx <- scoremtx %*% scoreweightmtx
help("cbind")
help("matrix")
View(scoremtx)
View(scoremtx)
rm(scoremtx)
rm(scoreweightmtx)
merged<- merge(score, scoreweight, by = 'Course.Code')
View(merged)
merged$total <- round((merged$Assignment.x * merged$Assignment.y) + (merged$Mid.Exam.x * merged$Mid.Exam.y) + (merged$Final.Exam.x * merged$Final.Exam.y))
merged
View(merged)
grade.intervals[1]
grade.intervals[2]
grade.intervals <- c(66,71,76,81,86,90,100)
grade.labels    <- c("D","C","B-","B","B+","A-","A")
grade.intervals[1]
grade.labels[1]
grade.labels[2]
grade.intervals[2]
grade.labels[3]
grade.intervals[3]
grade.labels[5]
grade.intervals[5]
grade.intervals[6]
grade.labels[6]
grade.labels[7]
for (i in 1:length(merged$total)) {
if (merged$total < grade.intervals[1]) {
merged$grade[i] <- grade.labels[1]
} else if (merged$total < grade.intervals[2]) {
merged$grade[i] <- grade.labels[2]
} else if (merged$total < grade.intervals[3]) {
merged$grade[i] <- grade.labels[3]
} else if (merged$total < grade.intervals[4]) {
merged$grade[i] <- grade.labels[4]
} else if (merged$total < grade.intervals[5]) {
merged$grade[i] <- grade.labels[5]
} else if (merged$total < grade.intervals[6]) {
merged$grade[i] <- grade.labels[6]
} else {
merged$grade[i] <- grade.labels[7]
}
}
warnings()
merged$total
merged$total < grade.intervals[1]
merged
for (i in 1:length(merged$total)) {
if (merged$total < grade.intervals[1]) {
merged$grade[i] <- grade.labels[1]
} else if (merged$total < grade.intervals[2]) {
merged$grade[i] <- grade.labels[2]
} else if (merged$total < grade.intervals[3]) {
merged$grade[i] <- grade.labels[3]
} else if (merged$total < grade.intervals[4]) {
merged$grade[i] <- grade.labels[4]
} else if (merged$total < grade.intervals[5]) {
merged$grade[i] <- grade.labels[5]
} else if (merged$total < grade.intervals[6]) {
merged$grade[i] <- grade.labels[6]
} else {
merged$grade[i] <- grade.labels[7]
}
}
for (i in 1:length(merged$total)) {
if (merged$total < grade.intervals[1]) {
merged$grade[i] <- grade.labels[1]
} else if (merged$total < grade.intervals[2]) {
merged$grade[i] <- grade.labels[2]
} else if (merged$total < grade.intervals[3]) {
merged$grade[i] <- grade.labels[3]
} else if (merged$total < grade.intervals[4]) {
merged$grade[i] <- grade.labels[4]
} else if (merged$total < grade.intervals[5]) {
merged$grade[i] <- grade.labels[5]
} else if (merged$total < grade.intervals[6]) {
merged$grade[i] <- grade.labels[6]
} else {
merged$grade[i] <- grade.labels[7]
}
}
warnings()
for (i in 1:length(merged$total)) {
if (merged$total[i] < grade.intervals[1]) {
merged$grade[i] <- grade.labels[1]
} else if (merged$total[i] < grade.intervals[2]) {
merged$grade[i] <- grade.labels[2]
} else if (merged$total[i] < grade.intervals[3]) {
merged$grade[i] <- grade.labels[3]
} else if (merged$total[i] < grade.intervals[4]) {
merged$grade[i] <- grade.labels[4]
} else if (merged$total[i] < grade.intervals[5]) {
merged$grade[i] <- grade.labels[5]
} else if (merged$total[i] < grade.intervals[6]) {
merged$grade[i] <- grade.labels[6]
} else {
merged$grade[i] <- grade.labels[7]
}
}
merged
write.csv(
data.frame(Student.Name = merged$Student.Name,
Total.Score = merged$total,
Grade = merged$grade),
"./Result.csv", row.names = FALSE
)
rm(selectdata)
anime <- read.csv('anime.csv', fileEncoding = 'UTF-8-BOM')
anime <- read.csv('anime.csv', fileEncoding = 'UTF-8-BOM')
anime <- read.csv('Anime.csv', fileEncoding = 'UTF-8-BOM')
View(anime)
# 2. Data Visualization
rm(anime)
anime <- read.csv('anime.csv', fileEncoding = 'UTF-8-BOM')
rm(anime)
anime <- read.csv('anime.csv', encoding = 'UTF-8-BOM')
View(anime)
View(anime)
is.na(anime)
sum(is.na(anime))
anime <- na.omit(anime)
table(anime$source)
anime$source
table(anime$source)
pie (
table(anime$source)
)
pie (
table(anime$source),
col = rainbow(10),
main = strwrap("Sources of Anime")
)
table(anime$source).type
table(anime$source)
table(anime$source).label
table(anime$source)[0]
table(anime$source)[1]
table(anime$source)[1]$label
table(anime$source)[1].label
legend(
"right",
cex = 0.3
)
table(anime$source).x
help(table)
x(table(anime$source) )
as.data.frame(table(anime$source))
as.data.frame(table(anime$source))$Var1
legend(
"right",
cex = 0.3,
labels = as.data.frame(table(anime$source))$Var1
)
legend(
"right",
cex = 0.3,
legend = as.data.frame(table(anime$source))$Var1
)
legend(
"right",
cex = 0.3,
legend = as.data.frame(table(anime$source))$Var1,
fill = rainbow(10)
)
table(anime$type)
barplot(
table(anime$type),
col = rainbow(6),
main = strwrap("Types of Anime")
)
legend(
"top",
cex = 0.3,
legend = as.data.frame(table(anime$type))$Var1,
fill = rainbow(6)
)
legend(
"top",
cex = 0.5,
legend = as.data.frame(table(anime$type))$Var1,
fill = rainbow(6)
)
legend(
"right",
cex = 0.7,
legend = as.data.frame(table(anime$source))$Var1,
fill = rainbow(10)
)
barplot(
table(anime$type),
col = rainbow(6),
main = strwrap("Types of Anime")
)
legend(
"top",
cex = 0.7,
legend = as.data.frame(table(anime$type))$Var1,
fill = rainbow(6)
)
table(anime$aired_from_year)
plot(
table(anime$aired_from_year)
)
plot(
table(anime$aired_from_year),
type = "olp"
)
plot(
table(anime$aired_from_year),
title = strwrap("Anime Aired from Year")
)
help(plot)
plot(
table(anime$aired_from_year),
main = strwrap("Anime Aired from Year")
)
plot(
table(anime$aired_from_year),
main = strwrap("Anime Aired from Year"),
type = "h"
)
hist(
x = table(anime$aired_from_year)
)
hist(
x = table(anime$aired_from_year),
main = strwrap("Anime Aired from Year"),
)
hist(
x = table(anime$rating),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$score),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$status),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$episodes),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$rank),
main = strwrap("Anime Rating"),
)
# Histogram:
hist(
x = table(anime$aired_from_year),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$popularity),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$popularity),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$score),
main = strwrap("Anime Rating"),
)
hist(
x = table(anime$score),
main = strwrap("Anime Score"),
)
header <- read.csv('Header.csv', fileEncoding = 'UTF-8-BOM')
detail <- read.csv('Detail.csv', fileEncoding = 'UTF-8-BOM')
items <- read.csv('Items.csv', fileEncoding = 'UTF-8-BOM')
View(header)
View(items)
View(detail)
header <- na.omit(header)
detail <- na.omit(detail)
items <- na.omit(items)
trans = merge(header, detail, by.x = "header_id", by.y = "transaction_id")
trans = merge(trans, items, by.x = "header_id", by.y = "id")
trans
trans = na.omit(trans)
trans
View(trans)
trans <- split(trans$user_id, trans$name)
trans
install.packages('arules')
library(arules)
rules <- apriori(trans, parameter = list(support = 0.05), target = 'frequent items')
inspect(rules)
rules <- apriori(trans, parameter = list(support = 0.05), target = 'frequent itemsets')
inspect(rules)
trans
trans$user_id
header <- read.csv('Header.csv', fileEncoding = 'UTF-8-BOM')
detail <- read.csv('Detail.csv', fileEncoding = 'UTF-8-BOM')
items <- read.csv('Items.csv', fileEncoding = 'UTF-8-BOM')
header <- na.omit(header)
detail <- na.omit(detail)
items <- na.omit(items)
trans = merge(header, detail, by.x = "header_id", by.y = "transaction_id")
trans = merge(trans, items, by.x = "header_id", by.y = "id")
rules <- apriori(trans, parameter = list(support = 0.05), target = 'frequent itemsets')
rules <- apriori(split(trans$user_id, trans$name), parameter = list(support = 0.05), target = 'frequent itemsets')
inspect(rules)
temp = data.frame(
user_id = trans$user_id,
name = trans$name
)
temp
inspect(rules)
View(rules)
View(temp)
View(trans)
inspect(ruleInduction(rules, confidence=0.5))
inspect(rules)
inspect(ruleInduction(rules, confidence=0.5))
inspect(ruleInduction(rules, confidence = 0.5))
help(inspect)
ruleInduction(rules, confidence = 0.5)
help(ruleInduction)
rules <- apriori(split(trans$user_id, trans$name), parameter = list(support = 0.05), target = 'frequent itemsets')
rules
inspect(rules)
ruleInduction(rules, confidence = 0.5)
help("data.frame")
lhs(rules)
inspect(ruleInduction(rules, confidence = 0.5))
ruleInduction(rules, confidence = 0.5)
help(ruleInduction)
assoc <- ruleInduction(rules, confidence = 0.5)
rules <- apriori(split(trans$user_id, trans$name), parameter = list(support = 0.05), target = 'frequent itemsets')
assoc <- ruleInduction(rules, confidence = 0.5)
inspect(assoc)
help(lhs)
rules <- apriori(split(trans$name, trans$user_id), parameter = list(support = 0.05), target = 'frequent itemsets')
colSums(is.na(trans)
colSums(is.na(trans))
is.na(trans)
head(trans, 4)
colSums(is.na(trans))
header <- read.csv('Header.csv', fileEncoding = 'UTF-8-BOM')
detail <- read.csv('Detail.csv', fileEncoding = 'UTF-8-BOM')
items <- read.csv('Items.csv', fileEncoding = 'UTF-8-BOM')
header <- na.omit(header)
detail <- na.omit(detail)
items <- na.omit(items)
colSums(is.na(trans))
colSums(is.na(trans))
trans = merge(header, detail, by.x = "header_id", by.y = "transaction_id")
trans = merge(trans, items, by.x = "header_id", by.y = "id")
colSums(is.na(trans))
install.packages('arules')
rules <- apriori(split(trans$name, trans$user_id), parameter = list(support = 0.05), target = 'frequent itemsets')
summary(trans)
trans <- trans[complete.cases(trans), ]
trans
temp <- trans %>% select(c("user_id", "item_id"))
assoc <- ruleInduction(rules, confidence = 0.5)
inspect(assoc)
rm(temp)
barplot(
table(anime$type),
col = rainbow(6),
main = strwrap("Types of Anime")
)
legend(
"top",
cex = 0.7,
legend = as.data.frame(table(anime$type))$Var1,
fill = rainbow(6)
)
View(detail)
View(header)
assoc <- ruleInduction(rules, confidence = 0.5)
